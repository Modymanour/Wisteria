// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Wisteria.Domain.Entities;


#nullable disable

namespace Wisteria.Migrations
{
    [DbContext(typeof(UserBase))]
    [Migration("20250418151431_AddCommunities")]
    partial class AddCommunities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CommunitiesUser", b =>
                {
                    b.Property<int>("Community_MembersUser_ID")
                        .HasColumnType("int");

                    b.Property<int>("Joined_CommunitiesCommunity_Id")
                        .HasColumnType("int");

                    b.HasKey("Community_MembersUser_ID", "Joined_CommunitiesCommunity_Id");

                    b.HasIndex("Joined_CommunitiesCommunity_Id");

                    b.ToTable("CommunitiesUser");
                });

            modelBuilder.Entity("Wisteria.Entities.Communities", b =>
                {
                    b.Property<int>("Community_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Community_Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Community_Id");

                    b.ToTable("Communities");
                });

            modelBuilder.Entity("Wisteria.Entities.Notifications", b =>
                {
                    b.Property<int>("Notif_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Notif_ID"));

                    b.Property<int?>("User_ID")
                        .HasColumnType("int");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.HasKey("Notif_ID");

                    b.HasIndex("User_ID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Wisteria.Entities.User", b =>
                {
                    b.Property<int>("User_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("User_ID"));

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("User_ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CommunitiesUser", b =>
                {
                    b.HasOne("Wisteria.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("Community_MembersUser_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wisteria.Entities.Communities", null)
                        .WithMany()
                        .HasForeignKey("Joined_CommunitiesCommunity_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Wisteria.Entities.Notifications", b =>
                {
                    b.HasOne("Wisteria.Entities.User", null)
                        .WithMany("Notif")
                        .HasForeignKey("User_ID");
                });

            modelBuilder.Entity("Wisteria.Entities.User", b =>
                {
                    b.Navigation("Notif");
                });
#pragma warning restore 612, 618
        }
    }
}
